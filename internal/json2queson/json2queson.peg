// Derived from https://github.com/pegjs/pegjs/blob/master/examples/json.pegjs
//
// MIT License
// 
// Copyright (c) 2010-2016 David Majda
// Copyright (c) 2017+ Futago-za Ryuu
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// JSON Grammar
// ============
//
// Based on the grammar from RFC 7159 [1].
//
// Note that JSON is also specified in ECMA-262 [2], ECMA-404 [3], and on the
// JSON website [4] (somewhat informally). The RFC seems the most authoritative
// source, which is confirmed e.g. by [5].
//
// [1] http://tools.ietf.org/html/rfc7159
// [2] http://www.ecma-international.org/publications/standards/Ecma-262.htm
// [3] http://www.ecma-international.org/publications/standards/Ecma-404.htm
// [4] http://json.org/
// [5] https://www.tbray.org/ongoing/When/201x/2014/03/05/RFC7159-JSON

// ----- 2. JSON Grammar -----

JSON_text
  = ws value:value ws { return value, nil }

begin_array     = ws "[" ws
begin_object    = ws "{" ws
end_array       = ws "]" ws
end_object      = ws "}" ws
name_separator  = ws ":" ws
value_separator = ws "," ws

ws "whitespace" = [ \t\n\r]*

// ----- 3. Values -----

value
  = "false"
  / "null"
  / "true"
  / object
  / array
  / number
  / str

// ----- 4. Objects -----

object
  = begin_object
    members:(
      head:member
      tail:(value_separator m:member { return m, nil })*
      {
        s := bytes.NewBuffer(head.([]byte))
        for _, v := range tail.([]interface{}) {
            s.WriteByte('_')
            s.Write(v.([]byte))
        }
        return s.Bytes(), nil
      }
    )?
    end_object
    {
      s := bytes.NewBuffer([]byte(`X.`))
      if members != nil {
          s.Write(members.([]byte))
      }
      s.Write([]byte(`.X`))
      return s.Bytes(), nil
    }

member
  = name:str name_separator value:value {
      return append(append(name.([]byte), '-'), value.([]byte)...), nil
    }

// ----- 5. Arrays -----

array
  = begin_array
    values:(
      head:value
      tail:(value_separator v:value { return v, nil })*
      {
        s := bytes.NewBuffer(head.([]byte))
        for _, v := range tail.([]interface{}) {
            s.WriteByte('_')
            s.Write(v.([]byte))
        }
        return s.Bytes(), nil
      }
    )?
    end_array
    {
      s := bytes.NewBuffer([]byte(`I.`))
      if values != nil {
          s.Write(values.([]byte))
      }
      s.Write([]byte(`.I`))
      return s.Bytes(), nil
    }

// ----- 6. Numbers -----

number "number"
  = sign:minus? i:int f:frac? e:exp?
    {
      var s bytes.Buffer
      for _, v := range []interface{}{sign, i, f, e} {
          if v != nil {
              s.Write(v.([]byte))
          }
      }
      return s.Bytes(), nil
    }

decimal_point
  = "."

digit1_9
  = [1-9]

e
  = [eE]

exp
  = e sign:(minus / plus)? i:DIGIT+
    {
      s := bytes.NewBuffer([]byte{'e'})
      if sign != nil {
          s.Write(sign.([]byte))
      }
      for _, v := range i.([]interface{}) {
          s.Write(v.([]byte))
      }
      return s.Bytes(), nil
    }

frac
  = decimal_point DIGIT+ { return c.text, nil }

int
  = zero / (digit1_9 DIGIT*) { return c.text, nil }

minus
  = "-"

plus
  = "+" { return []byte(nil), nil }

zero
  = "0"

// ----- 7. Strings -----

str "string"
  = quotation_mark chars:char* quotation_mark
    {
      s := bytes.NewBuffer([]byte(`w.`))
      for _, v := range chars.([]interface{}) {
          s.Write(v.([]byte))
      }
      s.Write([]byte(`.w`))
      return s.Bytes(), nil
    }

char
  = "." { return []byte(".."), nil }
  / "_" { return []byte("._"), nil }
  / " " { return []byte("_"), nil }
  / unescaped
  / escape	
    sequence:(
        '"'  { return []byte(`"`), nil }
      / "\\" { return []byte("\\"), nil }
      / "/"  { return []byte("/"), nil }
      / "b"  { return []byte(".b"), nil }
      / "f"  { return []byte(".f"), nil }
      / "n"  { return []byte(".n"), nil }
      / "r"  { return []byte(".r"), nil }
      / "t"  { return []byte(".t"), nil }
      / "u" digits:(HEXDIG HEXDIG HEXDIG HEXDIG) {
          s := bytes.NewBuffer([]byte(`.u`))
          for _, v := range digits.([]interface{}) {
              s.Write(v.([]byte))
          }
          return s.Bytes(), nil
        }
    )
    { return sequence, nil }

escape
  = "\\"

quotation_mark
  = '"'

unescaped
  = [^\\"]

// ----- Core ABNF Rules -----

// See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4234).
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i
